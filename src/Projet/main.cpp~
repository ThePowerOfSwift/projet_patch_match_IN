
/* -------------------------------------------------------------------------
  Minimal (unoptimized) example of PatchMatch. Requires that ImageMagick be installed.

  To improve generality you can:
   - Use whichever distance function you want in dist(), e.g. compare SIFT descriptors computed densely.
   - Search over a larger search space, such as rotating+scaling patches (see MATLAB mex for examples of both)
  
  To improve speed you can:
   - Turn on optimizations (/Ox /Oi /Oy /fp:fast or -O6 -s -ffast-math -fomit-frame-pointer -fstrength-reduce -msse2 -funroll-loops)
   - Use the MATLAB mex which is already tuned for speed
   - Use multiple cores, tiling the input. See our publication "The Generalized PatchMatch Correspondence Algorithm"
   - Tune the distance computation: manually unroll loops for each patch size, use SSE instructions (see readme)
   - Precompute random search samples (to avoid using rand, and mod)
   - Move to the GPU
  -------------------------------------------------------------------------- */ 
/*
unsigned char *input = (unsigned char*)(img.data);
for(int j = 0;j < img.rows;j++){
    for(int i = 0;i < img.cols;i++){
        unsigned char b = input[img.step * j + i ] ;
        unsigned char g = input[img.step * j + i + 1];
        unsigned char r = input[img.step * j + i + 2];
    }
}
*/ 
#include <stdio.h>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
  
#include "BITMAP.h"
#include "PatchMatch.h"
  int
main (int argc, char *argv[]) 
{
   argc--;
   argv++;
   if (argc != 3)
    {
      fprintf (stderr, "pm_minimal a b ann annd mode\n" 
		"Given input images a, b outputs nearest neighbor field 'ann' mapping a => b coords, and the squared L2 distance 'annd'\n"
		
		"These are stored as RGB 24-bit images, with a 24-bit int at every pixel. For the NNF we store (by<<12)|bx.");
      exit (1);
    }
   printf ("Loading mode\n");
   int mode = atoi (argv[2]);
    BITMAP * ab = NULL, *bb = NULL, *annb = NULL, *anndb = NULL;
   cv::Mat a, b, *ann = NULL, *annd = NULL, *knn = NULL, *knnd = NULL;
    switch (mode)
    {
     case 1:
       printf ("Loading input images\n");
       ab = load_bitmap (argv[0]);
       bb = load_bitmap (argv[1]);
       printf ("Running Stanford PatchMatch\n");
       patchmatch (ab, bb, annb, anndb);
       break;
     case 2:
       printf ("Loading input images\n");
       a = cv::imread (argv[0], CV_LOAD_IMAGE_GRAYSCALE);	//GRAYSCALE
      b = cv::imread (argv[1], CV_LOAD_IMAGE_GRAYSCALE);	//GRAYSCALE
      printf ("Running Stanford PatchMatch with OpenCV\n");
       patchmatch (&a, &b, ann, annd);
       delete ann;
       delete annd;
       break;
     case 3:
       printf ("Loading input images\n");
       a = cv::imread (argv[0], CV_LOAD_IMAGE_COLOR);	//GRAYSCALE
      b = cv::imread (argv[1], CV_LOAD_IMAGE_COLOR);	//GRAYSCALE
      printf ("Running PatchMatch with OpenCV & Brent & Rotations\n");
       patchmatch_brent (&a, &b, ann, annd);
       delete ann;
       delete annd;
       break;
     case 4:
       printf ("Loading input images\n");
       a = cv::imread (argv[0], CV_LOAD_IMAGE_COLOR);	//GRAYSCALE
      b = cv::imread (argv[1], CV_LOAD_IMAGE_COLOR);	//GRAYSCALE
      printf  ("Running PatchMatch with OpenCV & Brent & Rotations & KNN\n");
       patchmatch (&a, &b, ann, annd, knn, knnd);
       delete ann;
       delete annd;
       delete knn;
       delete knnd;
       break;
     default:
       printf ("Wrong PatchMatch Mode !\n");
       break;
     }
   return 0;
 }

  
